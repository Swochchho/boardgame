stages:
  - install
  - build
  - test
  - security_scan
  - deploy

variables:
  NODE_VERSION: "18"
  SURGE_DOMAIN: "tic-tac-toe-react-${CI_PIPELINE_ID}.surge.sh"

image: node:${NODE_VERSION}

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

before_script:
  - node --version
  - npm --version
  - npm ci --prefer-offline --no-audit

install_dependencies:
  stage: install
  script:
    - npm ci
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 week

build:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

test:
  stage: test
  script:
    - npm install --save-dev jest
    - npm test -- --watchAll=false --coverage || echo "No tests found"
  artifacts:
    reports:
      junit: junit.xml
    paths:
      - coverage/
    expire_in: 1 week
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'

security_scan:
  stage: security_scan
  script:
    - npm audit --production || true
    - npm install -g snyk
    - if [ -n "$SNYK_TOKEN" ]; then snyk auth --auth $SNYK_TOKEN; fi
    - snyk test --all-projects || true
    - apt-get update && apt-get install -y default-jre
    - wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
    - unzip dependency-check-8.3.1-release.zip
    - ./dependency-check/bin/dependency-check.sh --scan . --format HTML --format JSON --out ./security-report
  artifacts:
    paths:
      - security-report/
    expire_in: 1 week
    when: always

deploy_to_surge:
  stage: deploy
  script:
    - npm install -g surge
    - if [ -n "$SURGE_LOGIN" ]; then echo "$SURGE_LOGIN" > .surge_creds; fi
    - if [ -n "$SURGE_TOKEN" ]; then echo "$SURGE_TOKEN" >> .surge_creds; fi
    - surge --project ./dist --domain $SURGE_DOMAIN
  environment:
    name: production
    url: https://$SURGE_DOMAIN
  only:
    - main